asyncapi: '2.0.0'
info:
  title: Control Panel API
  version: '1.0.0'

servers:
  dev:
    url: tcp://localhost:9092
    protocol: kafka
  production:
    url: tcp://pkc-e0x5p.us-east1.gcp.confluent.cloud:9092
    protocol: kafka

channels:
  ride/requested:
    publish:
      operationId: rideRequested
      summary: Ride requested
      description: The user requested a ride.
      message:
        $ref: '#/components/messages/rideRequested'
  ride/accepted:
    publish:
      operationId: rideAccepted
      summary: Ride accepted
      message:
        $ref: '#/components/messages/rideAccepted'
  ride/assigned:
    subscribe:
      operationId: rideAssigned
      summary: Ride assigned
      message:
        $ref: '#/components/messages/rideAssigned'
  ride/changed:
    publish:
      operationId: rideChanged
      summary: Ride status changed
      message:
        $ref: '#/components/messages/rideStatus'
      x-lambda:
        url: https://gracious-lumiere-20f9f1.netlify.com/.netlify/functions/post-slack
        method: POST
        body:
          text: Ride ${message.payload.ride.id} has been ${message.payload.ride.status}.
          channel: workshop
        headers:
          Content-Type: application/json

components:
  messages:
    rideRequested:
      payload:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/user'
          ride:
            $ref: '#/components/schemas/ride'
          sentAt:
            $ref: '#/components/schemas/sentAt'
    rideAccepted:
      payload:
        type: object
        properties:
          rideId:
            $ref: '#/components/schemas/rideId'
          driverId:
            $ref: '#/components/schemas/driverId'
    rideAssigned:
      payload:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/user'
          driver:
            $ref: '#/components/schemas/driver'
          ride:
            $ref: '#/components/schemas/ride'
          sentAt:
            $ref: '#/components/schemas/sentAt'
    rideStatus:
      payload:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/user'
          driver:
            $ref: '#/components/schemas/driver'
          ride:
            $ref: '#/components/schemas/rideWithStatus'
          sentAt:
            $ref: '#/components/schemas/sentAt'
  schemas:
    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.
    userId:
      type: string
      description: Id of the user.
    driverId:
      type: string
      description: Id of the driver.
    rideId:
      type: integer
      description: Id of the ride.
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        fullName:
          type: string
    driver:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/driverId'
        fullName:
          type: string
    ride:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        from:
          $ref: '#/components/schemas/rideLocation'
          description: Position where the ride starts from.
        to:
          $ref: '#/components/schemas/rideLocation'
          description: Position where the ride finishes.
        price:
          type: number
          minimum: 0
          description: Price of the ride in Euros.
    rideWithStatus:
      allOf:
        - $ref: '#/components/schemas/ride'
        - type: object
          properties:
            status:
              type: string
              description: Status of the ride.
              enum:
                - picked-up
                - started
                - finished
                - paid
    rideLocation:
      type: object
      properties:
        latitude:
          type: number
          minimum: -90
          maximum: 90
          description: Latitude of the starting point.
        longitude:
          type: number
          minimum: -180
          maximum: 180
          description: Longitude of the starting point.
        friendlyName:
          type: string
          description: Human-friendly name of the location.
